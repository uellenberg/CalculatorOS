// This file contains every syscall.
// Syscalls are composed out of a stack function (optionally) and
// actions to glue everything together.
// They read data in from the empty space inside of a process' stack.
// That empty space is the 10 float section beginning at stack[3] and ending
// at stack[3 + LENGTH - 1].
//
// Syscall priority is 100.
//
// Priorities are arranged as follows:
// - Data resetting: 100
// - Syscall handling: 110
// - Syscall cleanup: 120
// - Set handlingSyscall: 130

inline const PRINT_SYSCALL_ID = 4;
inline const MEMALLOC_SYSCALL_ID = 5;
inline const MEMDEALLOC_SYSCALL_ID = 7;
inline const MEMWRITE_SYSCALL_ID = 6;
inline const READ_STDIN_SYSCALL_ID = 12;

createBehavior!("syscall", {
    setDefaultDisplay!({ display folder = "Syscalls"; });

    setItemName!("h_andling_syscall");
    setVal!("handlingSyscall", 0);

    setItemName!("s_yscall_return");
    setVal!("syscallReturn", 0);

    // Reset the syscall return so that it only gets used a single time.
    setValAction!("syscallReturn", {
        0
    }, 100);

    // TODO: Re-evaluate whether this is needed.
    //       It originally existed because the print syscall needed
    //       multiple actions runs to execute.
    setValAction!("handlingSyscall", {
        false
    }, 130, true, true);
});

createBehavior!("syscallPrint", {
    // This syscall completes in one go, so it doesn't need to be marked
    // as active.

    setDefaultDisplay!({ display folder = "Syscalls"; });

    // Write to the display character list if there's data.
    setValAction!("base.display.display_chars", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        const append = if(activeProcessStack[SYSCALL_STARTING_INDEX] == PRINT_SYSCALL_ID) {
            g_et_bytes(activeProcessStack[SYSCALL_STARTING_INDEX + 1])
        } else {
            []
        };

        join(display_chars, append)
    }, 110, true, true);
});

createBehavior!("syscallMemAlloc", {
    // This syscall completes in one go, so it doesn't need to be marked
    // as active.

    setDefaultDisplay!({ display folder = "Syscalls"; });

    // Write to the header with the newly allocated section.
    setValAction!("base.memory_main.m_emory_main_header", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMALLOC_SYSCALL_ID) {
            // Extra check to prevent Desmos from evaluating huge arrays.
            const numBlocks = activeProcessStack[SYSCALL_STARTING_INDEX] == MEMALLOC_SYSCALL_ID
                            ? ceil(activeProcessStack[SYSCALL_STARTING_INDEX + 1] / MEMORY_main_BLOCK_SIZE)
                            : 0;
            m_em_alloc_header(numBlocks)
        } else {
            m_emory_main_header
        }
    }, 110, true, true);

    // Write to the allocated blocks list with the newly allocated section.
    setValAction!("base.memory_main.m_emory_main_ids", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMALLOC_SYSCALL_ID) {
            // Extra check to prevent Desmos from evaluating huge arrays.
            const numBlocks = activeProcessStack[SYSCALL_STARTING_INDEX] == MEMALLOC_SYSCALL_ID
                            ? ceil(activeProcessStack[SYSCALL_STARTING_INDEX + 1] / MEMORY_main_BLOCK_SIZE)
                            : 0;
            m_em_occupy_blocks(numBlocks)
        } else {
            m_emory_main_ids
        }
    }, 110, true, true);

    // Write the newly allocated block into the return.
    setValAction!("base.syscall.syscallReturn", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        // Increment if there's data.
        if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMALLOC_SYSCALL_ID) {
            m_em_next_header_block_id()
        } else {
            syscallReturn
        }
    }, 111, true, true);

    helper!({
        // Gets the next header block ID for the memory.
        display folder = "Syscalls";
        export function m_em_next_header_block_id() {
            const numHeaderBlocks = floor(10000 / MEMORY_main_HEADER_SIZE);
            const indices = range(1, numHeaderBlocks);
            // Filter all of the indices that have their
            // active byte set to 0 (or they don't exist).
            // Previously, these were both in a single filter,
            // but indexing an array by an array of indices does
            // not produce undefined when indexing out of bounds,
            // which caused the array sizes to be different.
            // This caused issues with the piecewise that
            // it gets compiled to, and broke memory allocation.
            //
            // Previous code (included for the purposes of documenting
            // this behavior):
            // const filteredIndices = indices.filter(idx => (1 + MEMORY_main_HEADER_SIZE*(idx - 1)) > length(m_emory_main_header) || !m_emory_main_header[1 + MEMORY_main_HEADER_SIZE*(idx - 1)]);
            //
            // We include the active byte check first, to favor
            // lower indices, and this join is always safe
            // because these ranges are mutually exclusive, and
            // so won't exceed the maximum array size.
            const filteredIndices = join(
                indices.filter(idx => m_emory_main_header[1 + MEMORY_main_HEADER_SIZE*(idx - 1)] == 0),
                indices.filter(idx => (1 + MEMORY_main_HEADER_SIZE*(idx - 1)) > length(m_emory_main_header))
            );

            // This returns the ID of the memory block, not
            // its index in the header itself.
            // That's why we aren't adjusting it like 1 + MEMORY_main_HEADER_SIZE*(idx - 1),
            // as seen above.
            // This adjustment is done by the user of this value, if needed.
            filteredIndices[1]
        }

        // Gets the list of unoccupied blocks.
        display folder = "Syscalls";
        export function m_em_unoccupied_blocks() {
            const numBlocks = floor(10000 / MEMORY_main_BLOCK_SIZE);
            const indices = range(1, numBlocks);
            // Filter all the indices that m_emory_main_ids does not contain.
            // This works because unique will filter out further items from the
            // joined list, then we'll remove the items from the unique.
            unique(join(m_emory_main_ids, indices))[range(m_emory_main_ids.length + 1, numBlocks)]
        }

        // Returns the new occupied blocks list after allocating s_ize blocks to it.
        display folder = "Syscalls";
        export function m_em_occupy_blocks(s_ize) {
            join(m_emory_main_ids, m_em_unoccupied_blocks()[range(1, s_ize)])
        }

        // Returns the new header, with s_ize blocks
        // allocated.
        display folder = "Syscalls";
        export function m_em_alloc_header(s_ize) {
            // The next_header_block_id function is expensive,
            // so this prevents it from being evaluated multiple
            // times.
            m_em_alloc_header_1(s_ize, m_em_next_header_block_id(), m_em_unoccupied_blocks())
        }

        display folder = "Syscalls";
        export function m_em_alloc_header_1(s_ize, i_d, b_locks) {
            const index = 1 + MEMORY_main_HEADER_SIZE*(i_d - 1);

            let newHeader = m_emory_main_header;
            newHeader[index] = 1;

            define!(ALLOC_IDX, 0);
            iterate!({
                // Add 1 because we start at 0.
                const headerIndex = index + get!(ALLOC_IDX) + 1;
                // Each header item holds BYTES_PER_FLOAT / 2 block indices.
                const blocksLowerIndex = 1 + get!(ALLOC_IDX) * (BYTES_PER_FLOAT / 2);
                // Subtract 1 because this is an inclusive bound.
                // s_ize is also the maximum index, so limit it to that.
                const blocksUpperIndex = min(s_ize, blocksLowerIndex + (BYTES_PER_FLOAT / 2) - 1);

                // Don't exceed the size requested.
                // In order to reduce duplicate code, we'll simply set the index to 1
                // if this is the case, instead of doing no array set at all.
                const numItems = get!(ALLOC_IDX) * (BYTES_PER_FLOAT / 2);
                const setIndex = numItems > s_ize ? index : headerIndex;
                const setValue = numItems > s_ize ? 1 : e_ncode_two_bytes(b_locks[range(blocksLowerIndex, blocksUpperIndex)]);

                newHeader[setIndex] = setValue;

                define!(ALLOC_IDX, ALLOC_IDX + 1);
            }, MEMORY_main_HEADER_BLOCKS_SIZE);

            newHeader
        }
    });
});

createBehavior!("syscallMemDealloc", {
    // This syscall completes in one go, so it doesn't need to be marked
    // as active.

    setDefaultDisplay!({ display folder = "Syscalls"; });

    // Write to the allocated blocks list with the newly allocated section.
    setValAction!("base.memory_main.m_emory_main_ids", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMDEALLOC_SYSCALL_ID) {
            const id = activeProcessStack[SYSCALL_STARTING_INDEX + 1];

            // Extra check to prevent Desmos from evaluating huge arrays.
            const numBlocks = activeProcessStack[SYSCALL_STARTING_INDEX] == MEMDEALLOC_SYSCALL_ID
                            ? ceil(activeProcessStack[SYSCALL_STARTING_INDEX + 2] / MEMORY_main_BLOCK_SIZE)
                            : 0;

            m_em_deoccupy_blocks(id, numBlocks)
        } else {
            m_emory_main_ids
        }
    }, 110, true, true);

    // Set the corresponding header section to unfilled.
    setValAction!("base.memory_main.m_emory_main_header", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMDEALLOC_SYSCALL_ID) {
            const id = activeProcessStack[SYSCALL_STARTING_INDEX + 1];
            const index = 1 + MEMORY_main_HEADER_SIZE*(id - 1);

            let newHeader = m_emory_main_header;
            // We just need to set the block to unfilled.
            // If it gets reallocated, then that allocation will
            // override the data that we've left behind.
            // And if it doesn't (due to being smaller), then
            // any reads/writes won't use the non-overridden data
            // because they would be invalid anyway.
            newHeader[index] = 0;

            newHeader
        } else {
            m_emory_main_header
        }
    }, 111, true, true);

    helper!({
        // Returns the new occupied blocks list after removing the s_ize
        // blocks at header block i_dx.
        display folder = "Syscalls";
        export function m_em_deoccupy_blocks(i_d, s_ize) {
            // This index represents the starting point
            // where the first list of data blocks appears.
            // The 2 is 1 for Desmos starting at 1, and another 1
            // for going past the filled/unfilled data.
            const blocksStart = 2 + MEMORY_main_HEADER_SIZE*(i_d - 1);
            const dataBlockIDsPerHeaderBlock = BYTES_PER_FLOAT / 2;

            const blocksToRemove = range(1, s_ize).map(offset => {
                // Figure out which header block this one is a part of.
                const headerOffset = floor(offset / dataBlockIDsPerHeaderBlock);
                // Figure out the index of this data block inside of the header block.
                // These indices start at 0, so we'll subtract by 1 first (also to make it work with mod).
                const headerIndex = mod(offset - 1, dataBlockIDsPerHeaderBlock);

                g_et_two_byte(m_emory_main_header[blocksStart + headerOffset], headerIndex)
            });

            // This removes blocksToRemove from m_emory_main_ids.
            // blocksToRemove[s_ize] exists, so we need to start at s_ize + 1.
            unique(join(blocksToRemove, m_emory_main_ids)).slice(s_ize + 1)
        }
    });
});

createBehavior!("syscallMemWrite", {
    // This syscall completes in one go, so it doesn't need to be marked
    // as active.

    setDefaultDisplay!({ display folder = "Syscalls"; });

    setItemName!("m_em_write_block");
    setVal!("writeIndex", 0);

    // Set the block to write to.
    // Starts at 0.
    setValAction!("writeIndex", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMWRITE_SYSCALL_ID) {
            const id = activeProcessStack[SYSCALL_STARTING_INDEX + 1];
            const index = activeProcessStack[SYSCALL_STARTING_INDEX + 2];

            // Index refers to the float index in the allocation.
            // This can be turned into an index in the data array
            // by first determining which header block its data block index is in:
            // Each header block contains (BYTES_PER_FLOAT * MEMORY_main_HEADER_BLOCKS_SIZE) / 2
            // data block indices, and each data block contains MEMORY_main_BLOCK_SIZE floats.
            const dataBlockNum = floor(index / MEMORY_main_BLOCK_SIZE);
            const headerBlockIndex = floor(dataBlockNum / ((BYTES_PER_FLOAT * MEMORY_main_HEADER_BLOCKS_SIZE) / 2));
            const headerBlockTwoByteIndex = mod(dataBlockNum, (BYTES_PER_FLOAT * MEMORY_main_HEADER_BLOCKS_SIZE) / 2);

            // This is the index of the first header block for the specified ID.
            const blocksStart = 2 + MEMORY_main_HEADER_SIZE*(id - 1);

            // This is the header section that contains the index of our data block.
            const headerSection = m_emory_main_header[blocksStart + headerBlockIndex];
            // The index starts at 1, so we need to
            // subtract 1 to make it correct.
            const dataBlockIndex = g_et_two_byte(headerSection, headerBlockTwoByteIndex) - 1;

            // Each data block represents MEMORY_main_BLOCK_SIZE floats.
            // To find the exact float position, we need to get the starting position
            // of the block and add it to the offset from the starting index.
            // This offset is given by mod(index, MEMORY_main_BLOCK_SIZE).
            const dataIndex = dataBlockIndex * MEMORY_main_BLOCK_SIZE + mod(index, MEMORY_main_BLOCK_SIZE);

            dataIndex
        } else {
            0
        }
    }, 110, true, true);

    memoryDataForEach!("main", {
        // Write to each memory list, setting the correct value (if it exists).
        setValAction!("base.memory_main.m_emory_main_data_MEMID", {
            const activeProcessID = getVal!("base.mainLoop.activeProcessID");
            const activeProcessStack = s_yscall_get_stack(activeProcessID);

            const writeData = activeProcessStack[SYSCALL_STARTING_INDEX + 3];

            const writeIndex = getVal!("writeIndex");
            const memoryDataIndex = MEMID;

            // Each memory list has 10000 elements (Desmos restriction).
            // To figure out the list index, we just need to compute floor(writeIndex / 10000).
            // If that matches our index, then we'll write it.
            // Otherwise, we'll do nothing.
            const requestedMemoryDataIndex = floor(writeIndex / 10000);
            const localWriteIndex = mod(writeIndex, 10000);

            if(activeProcessStack[SYSCALL_STARTING_INDEX] == MEMWRITE_SYSCALL_ID && memoryDataIndex == requestedMemoryDataIndex) {
                let tempArr = m_emory_main_data_MEMID;
                tempArr[writeIndex + 1] = writeData;

                tempArr
            } else {
                m_emory_main_data_MEMID
            }
        }, 111, true, true);
    });
});

createBehavior!("syscallReadStdin", {
    // This syscall completes in one go, so it doesn't need to be marked
    // as active.

    setDefaultDisplay!({ display folder = "Syscalls"; });

    // Return the current data in the stdin if it exists.
    setValAction!("base.syscall.syscallReturn", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == READ_STDIN_SYSCALL_ID) {
            // Currently, stdin doesn't exist.
            // Instead, we'll use the keyboard directly.
            // TODO: Maybe implement actual stdin handling.
            getVal!("base.keyboard.keyboardBuffer")
        } else {
            syscallReturn
        }
    }, 110, true, true);

    // Clear the keyboard buffer after reading from it.
    setValAction!("base.keyboard.keyboardBuffer", {
        const activeProcessID = getVal!("base.mainLoop.activeProcessID");
        const activeProcessStack = s_yscall_get_stack(activeProcessID);

        if(activeProcessStack[SYSCALL_STARTING_INDEX] == READ_STDIN_SYSCALL_ID) {
            // No data (no bytes)
            0
        } else {
            keyboardBuffer
        }
    }, 111);
});

extendPrefab!("main", {
    useBehaviorPrefab!("syscall");
    useBehaviorPrefab!("syscallPrint");
    useBehaviorPrefab!("syscallMemAlloc");
    useBehaviorPrefab!("syscallMemDealloc");
    useBehaviorPrefab!("syscallMemWrite");
    useBehaviorPrefab!("syscallReadStdin");
});