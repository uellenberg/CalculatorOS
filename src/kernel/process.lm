// Processes run at priority 400. This is split up into the following priorities:
// - Process Manager Updates: 400
// - Process Acquisition: 410
// - Process Run: 430

define!(NUM_PROCESSES, 2);

// Processes have 10 floats of empty space for syscalls, plus one extra for syscall returns.
inline const DEFAULT_PROCESS_STACK = [-1, 7, 0, 0, 0, 0, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0];
define!(STACK_LENGTH, 3);
inline const SYSCALL_STARTING_INDEX = 3;
inline const SYSCALL_LENGTH = get!(STACK_LENGTH);
inline const SYSCALL_RETURN_POSITION = 6;

createBehavior!("processManager", {
    setDefaultDisplay!({ display folder = "Process Manager"; });

    setItemName!("n_ext_process_id");
    // Set this to the next process ID after the ones
    // given to all of the processes by default.
    setVal!("nextProcessID", { get!(NUM_PROCESSES) + 1 });

    setItemName!("n_ext_process_stack");
    setVal!("nextProcessStack", { [] });

    setItemName!("h_as_next_process");
    setVal!("hasNextProcess", 0);

    // If hasNextProcess is true and there's a list in nextProcessStack,
    // then that list has already been taken over by a process.
    // That's because this runs before everything else, so hasNextProcess is from
    // the previous loop.
    // This also means that we need to increment nextProcessID and set hasNextProcess to 0.
    //
    // This is a marker to figure out whether this is true.
    // Its priority is set before everything else, so it will remain consistent.
    setVal!("shouldClearProcess", 0);
    setInline!("shouldClearProcess");

    setValAction!("shouldClearProcess", {
        getVal!("hasNextProcess") == 1 && getVal!("nextProcessStack").length != 0
    }, 400, true, true);

    setValAction!("nextProcessID", {
        if(getVal!("shouldClearProcess")) {
            nextProcessID + 1
        } else {
            nextProcessID
        }
    }, 401, true, true);

    setValAction!("nextProcessStack", {
        if(getVal!("shouldClearProcess")) {
            []
        } else {
            nextProcessStack
        }
    }, 401, true, true);

    // If we do have a stack and we aren't meant to clear it, then we should
    // set this to 1.
    setValAction!("hasNextProcess", {
        if(getVal!("shouldClearProcess")) {
            0
        } else if(getVal!("nextProcessStack").length != 0) {
            1
        } else {
            hasNextProcess
        }
    }, 401, true, true);

    // Now, we'll build lists of active and inactive
    // processes so that the main loop can pick a process
    // to run and so that the processes themselves can determine
    // which process should take over the next one.
    setItemName!("a_ctive_processes");
    setVal!("activeProcesses", { [] });

    setItemName!("i_nactive_processes");
    setVal!("inactiveProcesses", { [] });

    setValAction!("activeProcesses", {
        sort(selectBehavior!("process", {
            p_rocess_active(getValSelect!("process.processID"), getValSelect!("process.stack"))
        }, true).filter(id => id != 0))
    }, 402, true, true);

    setValAction!("inactiveProcesses", {
        sort(selectBehavior!("process", {
            p_rocess_inactive(getValSelect!("process.processID"), getValSelect!("process.stack"))
        }, true).filter(id => id != 0))
    }, 402, true, true);

    helper!({
        // Returns 0 if the process isn't active, and the ID if it is.
        display folder = "Process Manager";
        export function p_rocess_active(p_id, p_stack) {
            if(p_stack[1] == -1) {
                0
            } else {
                p_id
            }
        }

        // Returns 0 if the process is active, and the ID if it isn't.
        display folder = "Process Manager";
        export function p_rocess_inactive(p_id, p_stack) {
            if(p_stack[1] == -1) {
                p_id
            } else {
                0
            }
        }
    });

    behaviorCustom!({
        // Get the stack of a certain process (syscall layer) so that it
        // can have its syscalls handled.
        display hidden = true;
        display folder = "Process Manager";
        export function s_yscall_get_stack(p_id) {
            state = DEFAULT_PROCESS_STACK;

            selectBehavior!("process", {
                if(p_id == getValSelect!("process.processID")) {
                    getValSelect!("process.stack")
                } else { state }
            });
        }
    }, 99);
});

define!(PROCESS_IDX, 1);

createBehavior!("process", {
    setDefaultDisplay!({ display folder = "Process (#${get!(PROCESS_IDX)})"; });

    setVal!("stack", { DEFAULT_PROCESS_STACK });

    // Increment the counter here so that it applies to this and the
    // previous item.
    // Because we've incremented it, we need to subtract 1.
    setItemDisplay!({ define!(PROCESS_IDX, PROCESS_IDX + 1); });
    setVal!("processID", { get!(PROCESS_IDX) - 1 });

    // First, we should take over the process mentioned in the process manager
    // if we're the process that's allowed to do so.
    // That process is the one with the lowest processID and which does not
    // currently have a process (i.e., its stack has stack[1] == -1).
    // This will be processManager.inactiveProcesses[1].

    setVal!("shouldAcquireProcess", 0);
    setInline!("shouldAcquireProcess");

    setDefaultDisplay!({ display folder = "Process Updates"; });

    setValAction!("shouldAcquireProcess", {
        const inactiveProcesses = {
            selectBehavior!("processManager", { state = getValSelect!("processManager.inactiveProcesses"); });
        };

        const hasNextProcess = {
            selectBehavior!("processManager", { state = getValSelect!("processManager.hasNextProcess"); });
        };

        // This is inside of an if to prevent undefined from messing things up.
        if(inactiveProcesses.length != 0 && hasNextProcess) {
            getVal!("processID") == inactiveProcesses[1]
        } else {
            0
        }
    }, 410, true, true);

    setValAction!("stack", {
        if(getVal!("shouldAcquireProcess")) {
            const newStack = {
                selectBehavior!("processManager", { state = getValSelect!("processManager.nextProcessStack"); });
            };

            newStack
        } else {
            stack
        }
    }, 411, true, true);

    setValAction!("processID", {
        if(getVal!("shouldAcquireProcess")) {
            const newPID = {
                selectBehavior!("processManager", { state = getValSelect!("processManager.nextProcessID"); });
            };

            newPID
        } else {
            processID
        }
    }, 411, true, true);

    // Now, run the process if we're the selected one and there isn't a syscall running.
    // If we are the selected one, and there isn't a syscall running, but there is
    // syscall data, that means that the sycall just ended and we should clear the sycall data.
    setValAction!("stack", {
        const chosenProcess = {
            selectBehavior!("mainLoop", { state = getValSelect!("mainLoop.activeProcessID"); });
        };
        if(chosenProcess == getVal!("processID")) {
            const handlingSyscall = {
                selectBehavior!("syscall", { state = getValSelect!("syscall.handlingSyscall"); });
            };

            // If we aren't handling a syscall but there's still a syscall in our stack,
            // then we'll clear it and not run the process.
            // This is done to ensure that syscall's updates (particularly to the disk or memory)
            // are fully processed.
            if(handlingSyscall) {
                stack
            } else if(stack[SYSCALL_STARTING_INDEX] == 0) {
                r_unstack(stack)
            } else {
                c_lear_syscall(stack)
            }
        } else {
            stack
        }
    }, 412, true, true);

    helper!({
        // Clears all syscall data in a stack, and moves
        // the syscall's return into the process' stack.
        display folder = "Process Manager";
        export function c_lear_syscall(s_tack) {
            let newStack = s_tack;
            // Clear only stack[3] because it triggers a syscall to run.
            // Syscall arguments don't need to be cleared because they won't be used.
            newStack[3] = 0;

            const syscallReturn = {
                selectBehavior!("syscall", { state = getValSelect!("syscall.syscallReturn"); });
            };

            // Set the syscall return.
            // The process is responsible for clearing
            // this return value after it's done using it, so
            // if the return value actually is zero then we don't
            // need to write it, because the corresponding stack space
            // should also be zero.
            // Because of this, we can use zero to mean that the stack space
            // shouldn't be updated (to give the process time to read from it).
            newStack[SYSCALL_RETURN_POSITION] = syscallReturn == 0 ? newStack[SYSCALL_RETURN_POSITION] : syscallReturn;

            newStack
        }
    }, 412);
});

createPrefab!("process", {
    useBehaviorPrefab!("process");
});

iterate!({
    usePrefab!("process");
}, NUM_PROCESSES);

extendPrefab!("main", {
    useBehaviorPrefab!("processManager");
});