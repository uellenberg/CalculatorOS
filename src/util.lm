folder "Byte Operations" {
    export function g_et_byte(f_loat, i_ndex) {
        const base = 256;
        const len = BYTES_PER_FLOAT;

        const pt1 = f_loat/base^(len-i_ndex-1);
        const pt2 = f_loat/base^(len-i_ndex);

        floor(pt1-floor(pt2)*base)
    }

    export function g_et_two_byte(f_loat, i_ndex) {
        const base = 256*256;
        const len = BYTES_PER_FLOAT / 2;

        const pt1 = f_loat/base^(len-i_ndex-1);
        const pt2 = f_loat/base^(len-i_ndex);

        floor(pt1-floor(pt2)*base)
    }

    export function e_ncode_bytes(b_ytes) {
        const base = 256;

        sum(n = 1; b_ytes.length) {
            b_ytes[n] * (base ^ (BYTES_PER_FLOAT - n))
        }
    }

    export function e_ncode_two_bytes(b_ytes) {
        const base = 256;

        sum(n = 1; b_ytes.length) {
            const p1 = floor(b_ytes[n] / 256);
            const p2 = b_ytes[n] % 256;

            // Increment the power by twice each iteration,
            // because we're handling two bytes each loop.
            // The final minus 1 is there to ensure that
            // power eventually reaches 0.
            const power = BYTES_PER_FLOAT - 2 * (n - 1) - 1;

            p1 * (base ^ power) + p2 * (base ^ (power - 1))
        }
    }
}