createBehavior!("display", {
    setDefaultDisplay!({ display folder = "Display (LAG)"; });

    // A list of all the bytes written
    // to the screen.
    setItemName!("d_isplay_chars");
    setVal!("display_chars", { [] });

    setItemName!("d_isplay_pos");
    setVal!("display_pos", { [] });
    setInline!("display_pos");

    setItemDisplay!({ display hidden = true; });
    setValAction!("display_pos", {
        if(getVal!("display_chars").length == 0) {
            []
        } else {
            range(1, getVal!("display_chars").length).map(idx => {
                const cursor = idx - 1;

                const pos_x = DISPLAY_LEFT_X + DISPLAY_TEXT_WIDTH * mod(cursor, DISPLAY_WIDTH);
                const pos_y = DISPLAY_TOP_Y - DISPLAY_TEXT_HEIGHT * floor(cursor / DISPLAY_WIDTH);

                (pos_x, pos_y)
            })
        }
    }, 500, true, true);

    helper!({
        display folder = "Display (LAG)";
        export function g_et_char(c_harcode) {
            const display_chars = {
                state = [];

                selectBehavior!("display", {
                    state = getValSelect!("display.display_chars");
                });
            };

            const display_pos = {
                state = [];

                selectBehavior!("display", {
                    state = getValSelect!("display.display_pos");
                });
            };

            // We need to filter display_pos by every index where
            // display_chars is the specified character.
            const filterIdx = range(1, display_chars.length).filter(idx => display_chars[idx] == c_harcode);

            // We can index by an array to get the array of all elements with matching indices.
            display_pos[filterIdx]
        }
    }, 501);
});

define!(ALPHABET, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<,>.:;\"'{[}]+=_-)(*&^%$#@!~`|\\");

forEachChar!(ALPHABET, {
    // CHAR becomes the character.
    // CHARCODE becomes the character code (byte).

    extendBehavior!("display", {
        setItemName!("d_isplay_CHARCODE");
        // This is inline, so no display is needed.
        setVal!("display_CHARCODE", { [] });
        setInline!("display_CHARCODE");

        // Apply the display to the generated variable.
        setItemDisplay!({
            display folder = "Display (LAG)";
            display hidden = true;
            display label = "CHAR";
            display size = width / 750;
            display color = b_lack;
        });
        setValAction!("display_CHARCODE", {
            g_et_char(CHARCODE)
        }, 501, true, true);
    });
});

extendPrefab!("main", {
    useBehaviorPrefab!("display");
});