display folder = "Shell Program";
stackfunction s_hell() {
    // Main loop:
    // - Read from stdin into a buffer string.
    // - Track the previous length of the string on each read.
    // - Search for the new characters for a newline.
    //   Print out each character to stdout.
    //   If found, split into an eval string, then handle the eval string as a command.
    const initialAllocSize = 10;

    stackvar readStrPtr;
    stackvar readStrLen;
    stackvar readStrCap;

    readStrLen = 0;
    readStrCap = initialAllocSize;
    m_alloc(initialAllocSize, &readStrPtr);

    stackvar evalStrPtr;
    stackvar evalStrLen;
    stackvar evalStrCap;

    evalStrLen = 0;
    evalStrCap = initialAllocSize;
    m_alloc(initialAllocSize, &evalStrPtr);

    loop {
        stackvar readBuffer;
        stackvar readBufferLen;

        r_ead_stdin(&readBuffer);
        p_rint(readBuffer);

        readBufferLen = n_um_bytes(readBuffer);

        stackvar i;
        i = 0;

        // The biggest bottleneck is writing to memory, so
        // we want to avoid it as much as possible.
        // To do that, we'll only write when we encounter a newline,
        // or at the very end of the while loop.
        // This variable represents the position that we should start reading at.
        stackvar readStart;
        readStart = 0;

        while(i < readBufferLen) {
            const curByte = g_et_byte(readBuffer, i);

            // If it's a newline, then split it here
            // and handle it.
            if(curByte == char!("\n")) {
                // Write all the text from readStart to right before the newline
                // into the read buffer.
                // Then, we'll move readStart up for the next read.
                s_tr_extend_with_float(&readStrPtr, &readStrLen, &readStrCap, b_yte_slice(readBuffer, readStart, i));
                readStart = i + 1;

                // We can split efficiently by swapping the strings.
                // This will put every previous character into the eval string
                // and effectively clear the eval string.
                stackvar swapTemp;

                swapTemp = readStrPtr;
                readStrPtr = evalStrPtr;
                evalStrPtr = swapTemp;

                swapTemp = readStrCap;
                readStrCap = evalStrCap;
                evalStrCap = swapTemp;

                // The read string should be cleared now, so
                // we'll just set its length to zero.
                evalStrLen = readStrLen;
                readStrLen = 0;

                stringJumpFast!("evalStrPtr", "evalStrLen",
                    "ping", {
                        p_rint(string!("pong!")[1]);
                    },
                    "testcmd", {
                        p_rint(string!("Works")[1]);
                    },
                    "echo", {
                        p_rint(string!("doesnt")[1]);
                    },
                    "ls", {
                        l_s_cmd();
                    }
                );
            }

            i = i + 1;
        }

        // Try reading in the last section.
        if(readStart < BYTES_PER_FLOAT) {
            s_tr_extend_with_float(&readStrPtr, &readStrLen, &readStrCap, b_yte_slice(readBuffer, readStart, BYTES_PER_FLOAT));
        }
    }
}