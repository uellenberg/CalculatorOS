display folder = "Write Test Program";
stackfunction w_rite_test() {
    stackvar i;
    i = 0;
    const num_headers = floor(10000 / DISK_main_HEADER_SIZE);

    // Search for the first file record.
    while(i < num_headers && d_isk_main_header[1 + i * DISK_main_HEADER_SIZE] == 0) {
        i = i + 1;
    }

    stackvar j;
    j = 0;

    // Offset by the isActive byte, as well as
    // by Desmos' starting list index.
    const nameStart = 1 + i * DISK_main_HEADER_SIZE + 1;

    // Output each part of the file's name.
    while(d_isk_main_header[nameStart + j] != 0 && j < DISK_main_HEADER_NAME_SIZE) {
        p_rint(d_isk_main_header[nameStart + j]);
        j = j + 1;
    }

    // Now, read each block for data and output it.
    j = 0;

    // Offset by the isActive byte, as well as
    // by Desmos' starting list index.
    const blocksStart = 1 + i * DISK_main_HEADER_SIZE + 1 + DISK_main_HEADER_NAME_SIZE;
    while(d_isk_main_header[blocksStart + j] != 0 && j < DISK_main_HEADER_BLOCKS_SIZE) {
        const blockLocation = d_isk_main_header[blocksStart + j];

        // Each block is 2-bytes.
        stackvar byteIdx;
        byteIdx = 0;
        while(byteIdx < (BYTES_PER_FLOAT / 2) && g_et_two_byte(blockLocation, byteIdx) != 0) {
            // Find the starting index for the block (accounting for Desmos lists starting at 1).
            // Blocks start at 1 (so that the above check can work), but we need to correct
            // for this when doing our indexing.
            const blockIndex = 1 + DISK_main_BLOCK_SIZE * (g_et_two_byte(blockLocation, byteIdx) - 1);
            stackvar k;
            k = 0;
            while(d_isk_main_read(blockIndex + k) != 0 && k < DISK_main_BLOCK_SIZE) {
                p_rint(d_isk_main_read(blockIndex + k));
                k = k + 1;
            }

            byteIdx = byteIdx + 1;
        }

        j = j + 1;
    }
}