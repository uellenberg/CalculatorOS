// Copies a chunk of memory from one pointer to another.
// The data stored at the index specified by the from offset is copied
// to the position specified by the to offset.
// To copy everything, the offsets should be 0 and the length should be
// the total number of floats to copy.
stackfunction m_em_cpy(f_rom_ptr, t_o_ptr, f_rom_off, t_o_off, l_en) {
    stackvar i;
    stackvar readData;

    while(i < l_en) {
        r_ead(f_rom_ptr, f_rom_off + i, &readData);
        w_rite(t_o_ptr, t_o_off + i, readData);

        i = i + 1;
    }
}

// Reallocates a memory block to a new capacity, copying over the existing data.
// If the memory block isn't using the full length, then a smaller value for len
// may be supplied, and only data up to that length will be copied.
// Otherwise, len should be equal to the current capacity.
stackfunction r_e_alloc(/* & */ p_tr, /* & */ c_ap, l_en, n_ew_cap) {
    stackvar oldPtr;
    oldPtr = *p_tr;

    m_alloc(n_ew_cap, p_tr);

    m_em_cpy(oldPtr, *p_tr, 0, 0, l_en);

    f_ree(oldPtr, *c_ap);
    *c_ap = n_ew_cap;
}